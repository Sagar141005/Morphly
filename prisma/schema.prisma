generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  profilePic  String?
  plan        Plan     @default(FREE)
  stripeId    String?  
  files       File[]
  conversions Conversion[]
  createdAt   DateTime @default(now())

  stripeCustomerId      String? 
  stripeSubscriptionId  String?
  stripePriceId         String?
  currentPeriodEnd      DateTime? 

  Account Account[]
  Session Session[]
}

model File {
  id          String   @id @default(cuid())
  name        String
  type        String
  size        Int
  url         String?
  status      FileStatus @default(PROCESSED)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())

  Compression Compression[]
}

model Compression {
  id             String         @id @default(cuid())
  file           File           @relation(fields: [fileId], references: [id])
  fileId         String
  targetSize     Int?
  compressedSize Int?
  level          CompressionLevel
  outputUrl      String?
  createdAt      DateTime       @default(now())
}


enum CompressionLevel {
  LOW
  MEDIUM
  HIGH
  CUSTOM
}

enum Plan {
  FREE
  PRO
}

enum FileStatus {
  PROCESSING
  PROCESSED
  EXPIRED
}

model Conversion {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  inputFile   String?   
  outputFile  String?
  fromFormat  String? 
  toFormat    String? 
  sizeBefore  Int? 
  sizeAfter   Int? 
  createdAt   DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}